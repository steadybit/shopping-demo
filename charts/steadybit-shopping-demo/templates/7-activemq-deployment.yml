{{- if .Values.activemq.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: steadybit-demo
  labels:
    run: activemq
    service-tier: "1"
    domain: "shop-checkout"
    tags.datadoghq.com/service: shop-checkout
    tags.datadoghq.com/version: 1.0.0
  name: activemq
spec:
  replicas: {{ .Values.activemq.replicaCount }}
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      run: activemq
  template:
    metadata:
      labels:
        run: activemq
        service-tier: "1"
        domain: "shop-checkout"
        tags.datadoghq.com/service: shop-checkout
        tags.datadoghq.com/version: 1.0.0
      {{- with .Values.global.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: steadybit-demo
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: run
                    operator: In
                    values:
                      - activemq
              topologyKey: "topology.kubernetes.io/zone"
      containers:
        - image: {{ .Values.activemq.image.name}}:{{ .Values.activemq.image.tag }}
          resources: {{ toYaml .Values.activemq.resources | nindent 14 }}
          imagePullPolicy: Always
          name: activemq
          ports:
            - containerPort: 61616
              protocol: TCP
          env:
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - curl -u admin:admin -H origin:localhost 'http://localhost:8161/api/jolokia/read/org.apache.activemq:type=Broker,brokerName=localhost,service=Health/CurrentStatus' | grep Good
            initialDelaySeconds: 20
            periodSeconds: 5
          readinessProbe:
            tcpSocket:
              port: 61616
            initialDelaySeconds: 15
            periodSeconds: 10
          volumeMounts:
            - name: "activemq-config"
              mountPath: "/opt/activemq/conf/activemq.xml"
              subPath: "activemq.xml"
      volumes:
            - name: "activemq-config"
              configMap:
                name: "activemq-config"
      {{- with .Values.activemq.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
        - name: regcredinternal
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: steadybit-demo
  name: activemq-config
data:
  activemq.xml: |
    <beans
            xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
        <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="locations">
                <value>file:${activemq.conf}/credentials.properties</value>
            </property>
        </bean>
        <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}">
            <destinationPolicy>
                <policyMap>
                    <policyEntries>
                        <policyEntry topic=">" >
                            <pendingMessageLimitStrategy>
                                <constantPendingMessageLimitStrategy limit="1000"/>
                            </pendingMessageLimitStrategy>
                        </policyEntry>
                    </policyEntries>
                </policyMap>
            </destinationPolicy>
            <managementContext>
                <managementContext createConnector="false"/>
            </managementContext>
            <persistenceAdapter>
                <kahaDB directory="${activemq.data}/kahadb"/>
            </persistenceAdapter>
            <systemUsage>
                <systemUsage>
                    <memoryUsage>
                        <memoryUsage percentOfJvmHeap="70" />
                    </memoryUsage>
                    <storeUsage>
                        <storeUsage limit="64 mb"/>
                    </storeUsage>
                    <tempUsage>
                        <tempUsage limit="64 mb"/>
                    </tempUsage>
                </systemUsage>
            </systemUsage>
            <transportConnectors>
                <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            </transportConnectors>
            <shutdownHooks>
                <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
            </shutdownHooks>
        </broker>
        <import resource="jetty.xml"/>
    </beans>
---
apiVersion: v1
kind: Service
metadata:
  namespace: steadybit-demo
  labels:
    run: activemq
  name: activemq
spec:
  ports:
    - port: 61616
      protocol: TCP
      targetPort: 61616
  selector:
    run: activemq
  type: ClusterIP
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: activemq-pdb
  namespace: steadybit-demo
spec:
  minAvailable: 1
  selector:
    matchLabels:
      run: activemq
{{- end -}}